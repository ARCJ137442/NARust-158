//! üìÑOpenNARS `nars.language.Term`
//! * ‚ö†Ô∏è‰∏çÂåÖÂê´‰∏éÁâπÂÆöÂ±ÇÊï∞NarseseÊúâÂÖ≥ÁöÑÈÄªËæë
//!   * üìÑ‰∫ãÂÖ≥NAL-6ÁöÑ`isConstant`„ÄÅ`renameVariables`ÊñπÊ≥ïÔºå‰∏ç‰∫àÂú®Ê≠§ÂÆûÁé∞
//! * ‚ö†Ô∏è‰∏çÂåÖÂê´‰∏é„ÄåËÆ∞ÂøÜÂå∫„ÄçÊúâÂÖ≥ÁöÑÊñπÊ≥ï
//!   * üìÑ`make`
//!   * üìùOpenNARS‰∏≠ÊúâÂÖ≥`make`ÁöÑÁõÆÁöÑÔºöÈÅøÂÖçÂú®ËÆ∞ÂøÜÂå∫‰∏≠**ÈáçÂ§çÊûÑÈÄ†**ËØçÈ°π
//!     * üö©Â∑≤ÁªèÂú®Ê¶ÇÂøµÂå∫‰∏≠‚áí‰ΩøÁî®Â∑≤Êúâ„ÄåÊ¶ÇÂøµ„ÄçÁöÑËØçÈ°π
//!     * üìåÊú¨Ë¥®‰∏äÊòØ„ÄåÁºìÂ≠ò„ÄçÁöÑÈúÄÊ±Ç‰∏é‰ΩúÁî®
//! * ‚úÖ„Äê2024-06-14 16:33:57„ÄëÂü∫Êú¨ÂÆåÊàêÂØπ„ÄåÂü∫Á°ÄËØçÈ°π„ÄçÁöÑÂ±ûÊÄßÊ£ÄÊü•

use crate::io::symbols::*;
use crate::language::*;
use narsese::api::{GetCategory, TermCategory};

/// üìÑOpenNARS `nars.language.Term`
impl Term {
    /// Ê®°Êãü`Term.getName`
    /// * üÜï‰ΩøÁî®Ëá™Ë∫´ÂÜÖÂª∫ÁöÑ„ÄåËé∑ÂèñÂêçÁß∞„ÄçÊñπÊ≥ï
    ///   * Áõ∏ËæÉOpenNARSÊõ¥**Áü≠**
    ///   * ‰ªçËÉΩÊª°Ë∂≥OpenNARSÁöÑÈúÄÊ±Ç
    /// * üéØOpenNARSÂéüÊúâÈúÄÊ±Ç
    ///   * üìå‰øùËØÅ„ÄåËØçÈ°π‰∏çÂêå ‚áî ÂêçÁß∞‰∏çÂêå„Äç
    ///   * üìå‰øùËØÅ„ÄåÂèØÁî®‰∫é„ÄéÊ¶ÇÂøµ„Äè„ÄéËÆ∞ÂøÜÂå∫„ÄèÁöÑÁ¥¢Âºï„Äç
    ///
    /// # üìÑOpenNARS
    ///
    /// Reporting the name of the current Term.
    ///
    /// @return The name of the term as a String
    #[doc(alias = "get_name")]
    pub fn name(&self) -> String {
        self.format_name()
    }

    // * ‚úÖ`is_constant`Â∑≤Âú®Âà´Â§ÑÂÆö‰πâ
    // * ‚úÖ`is_placeholder`Â∑≤Âú®Âà´Â§ÑÂÆö‰πâ

    /// Ê®°Êãü`Term.getComplexity`
    /// * üö©ÈÄªËæë from OpenNARS
    ///   * ÂéüÂ≠ê ‚áí 1
    /// //  * ÂèòÈáè ‚áí 0
    ///   * Â§çÂêà ‚áí 1 + ÊâÄÊúâÁªÑÂàÜÂ§çÊùÇÂ∫¶‰πãÂíå
    ///
    /// # üìÑOpenNARS
    ///
    /// - The syntactic complexity, for constant atomic Term, is 1.
    /// - The complexity of the term is the sum of those of the components plus 1
    /// // - The syntactic complexity of a variable is 0, because it does not refer to * any concept.
    ///
    /// @return The complexity of the term, an integer
    #[doc(alias = "get_complexity")]
    pub fn complexity(&self) -> usize {
        // Ââ©‰ΩôÁ±ªÂûã
        use TermComponents::*;
        match &self.components {
            // Âç†‰ΩçÁ¨¶ ‚áí 0
            Empty => 0,
            // ÂéüÂ≠ê/ÂèòÈáè ‚áí 1 | ‰∏çÂåÖÊã¨„ÄåÂèòÈáè„Äç
            // * üö©ÁõÆÂâçÈÅµÁÖßÊõ¥Êñ∞ÁöÑPyNARSËÆæÁΩÆÔºåÂ∞Ü„ÄåÂèòÈáèËØçÈ°π„ÄçÁöÑÂ§çÊùÇÂ∫¶ÂÆö‰∏∫1
            Word(..) | Variable(..) | Interval(..) => 1,
            // Â§öÂÖÉ ‚áí 1 + ÂÜÖÈÉ®ÊâÄÊúâËØçÈ°πÂ§çÊùÇÂ∫¶‰πãÂíå
            Compound(terms) => 1 + terms.iter().map(Term::complexity).sum::<usize>(),
        }
    }

    /// üÜïÂà§Êñ≠ÊòØÂê¶‰∏∫„ÄåÈõ∂Â§çÊùÇÂ∫¶„Äç
    /// * üéØÁî®‰∫éÈÉ®ÂàÜ„ÄåÈô§‰ª•Â§çÊùÇÂ∫¶„ÄçÁöÑÂáΩÊï∞
    #[doc(alias = "zero_complexity")]
    pub fn is_zero_complexity(&self) -> bool {
        self.complexity() == 0
    }

    /// üÜïÁî®‰∫éÊõø‰ª£JavaÁöÑ`x.getClass() == y.getClass()`
    #[inline(always)]
    pub fn is_same_type(&self, other: &Self) -> bool {
        self.identifier == other.identifier
    }
}

impl GetCategory for Term {
    fn get_category(&self) -> TermCategory {
        use TermCategory::*;
        match self.identifier.as_str() {
            // * üö©ÂéüÂ≠êÔºöËØçËØ≠„ÄÅÂç†‰ΩçÁ¨¶„ÄÅÂèòÈáè
            WORD | PLACEHOLDER | VAR_INDEPENDENT | VAR_DEPENDENT | VAR_QUERY => Atom,
            // * üö©ÈôàËø∞ÔºöÁªßÊâø„ÄÅÁõ∏‰ºº„ÄÅËï¥Âê´„ÄÅÁ≠â‰ª∑ | ‚ùå‰∏çÂåÖÊã¨„ÄåÂÆû‰æã„Äç„ÄåÂ±ûÊÄß„Äç„ÄåÂÆû‰æãÂ±ûÊÄß„Äç
            INHERITANCE_RELATION | IMPLICATION_RELATION | SIMILARITY_RELATION
            | EQUIVALENCE_RELATION => Statement,
            // * üö©‰∏ÄÂÖÉÔºöÂê¶ÂÆö
            NEGATION_OPERATOR |
            // * üö©‰∫åÂÖÉÂ∫èÂàóÔºöÂ∑ÆÈõÜ
            DIFFERENCE_EXT_OPERATOR | DIFFERENCE_INT_OPERATOR |
            // * üö©Â§öÂÖÉÂ∫èÂàóÔºö‰πòÁßØ„ÄÅÂÉè
            PRODUCT_OPERATOR | IMAGE_EXT_OPERATOR | IMAGE_INT_OPERATOR |
            // * üö©Â§öÂÖÉÈõÜÂêàÔºöËØçÈ°πÈõÜ„ÄÅ‰∫§ÈõÜ„ÄÅÂêàÂèñ„ÄÅÊûêÂèñ
            SET_EXT_OPERATOR
            | SET_INT_OPERATOR
            | INTERSECTION_EXT_OPERATOR
            | INTERSECTION_INT_OPERATOR
            | CONJUNCTION_OPERATOR
            | DISJUNCTION_OPERATOR => Compound,
            // * üö©ÂÖ∂ÂÆÉ‚áípanicÔºà‰∏çÂ∫îÂá∫Áé∞Ôºâ
            _ => panic!("Unexpected compound term identifier: {}", self.identifier),
        }
    }
}

/// ÂçïÂÖÉÊµãËØï
#[cfg(test)]
mod tests {
    use super::*;
    use crate::test_term as term;
    use crate::{ok, util::AResult};
    use nar_dev_utils::{asserts, macro_once};

    #[test]
    fn name() -> AResult {
        macro_once! {
            // * üö©Ê®°ÂºèÔºöËØçÈ°πÂ≠óÁ¨¶‰∏≤ ‚áí È¢ÑÊúü
            macro fmt($($term:literal => $expected:expr)*) {
                asserts! {$(
                    term!($term).to_string() => $expected
                )*}
            }
            // Âç†‰ΩçÁ¨¶
            "_" => "_"
            // ÂéüÂ≠êËØçÈ°π
            "A" => "A"
            "$A" => "$1" // ! üö©„Äê2024-06-13 19:02:58„ÄëÁé∞Âú®ÂØπ„ÄåÂèòÈáèËØçÈ°π„Äç‰ºöËá™Âä®ÈáçÂëΩÂêç
            "#A" => "#1" // ! üö©„Äê2024-06-13 19:02:58„ÄëÁé∞Âú®ÂØπ„ÄåÂèòÈáèËØçÈ°π„Äç‰ºöËá™Âä®ÈáçÂëΩÂêç
            "?A" => "?1" // ! üö©„Äê2024-06-13 19:02:58„ÄëÁé∞Âú®ÂØπ„ÄåÂèòÈáèËØçÈ°π„Äç‰ºöËá™Âä®ÈáçÂëΩÂêç
            // Â§çÂêàËØçÈ°π
            "{A, B}" => "{}(A B)"
            "[A, B]" => "[](A B)"
            "(&, A, B)" => "&(A B)"
            "(|, A, B)" => "|(A B)"
            "(-, A, B)" => "(A - B)"
            "(~, A, B)" => "(A ~ B)"
            "(*, A, B)" => "*(A B)"
            r"(/, R, _)" => r"/(R _)"
            r"(\, R, _)" => r"\(R _)"
            r"(/, R, _, A)" => r"/(R _ A)"
            r"(\, R, _, A)" => r"\(R _ A)"
            r"(&&, A, B)" => r"&&(A B)"
            r"(||, A, B)" => r"||(A B)"
            r"(--, A)" => r"(-- A)"
            // ÈôàËø∞
            "<A --> B>" => "(A --> B)"
            "<A <-> B>" => "(A <-> B)"
            "<A ==> B>" => "(A ==> B)"
            "<A <=> B>" => "(A <=> B)"
            // ! Ëá™Âä®ÊéíÂ∫è
            "<B <-> A>" => "(A <-> B)"
            "<B <=> A>" => "(A <=> B)"
            // ! ÂèòÈáèÈáçÂëΩÂêç
            "(*, $e, #d, ?c, $b, #a)" => "*($1 #2 ?3 $4 #5)"
            "(/, $e, #d, ?c, $b, #a, _)" => "/($1 #2 ?3 $4 #5 _)"
        }
        ok!()
    }

    #[test]
    fn complexity() -> AResult {
        macro_once! {
            // * üö©Ê®°ÂºèÔºöËØçÈ°πÂ≠óÁ¨¶‰∏≤ ‚áí È¢ÑÊúü
            macro fmt($($term:literal => $expected:expr)*) {
                asserts! {$(
                    term!($term).complexity() => $expected
                )*}
            }
            // Âç†‰ΩçÁ¨¶
            "_" => 0
            // ËØçËØ≠
            "A" => 1
            // ÂèòÈáè
            "$A" => 1 // ! üö©„Äê2024-06-14 00:28:01„ÄëÁé∞Âú®ÈÅµÁÖßPyNARSÁ≠âÊõ¥Êñ∞ÁâàÊú¨ÁöÑÂÅöÊ≥ï
            "#A" => 1
            "?A" => 1
            // Â§çÂêàËØçÈ°π
            "{A}" => 2
            "[A]" => 2
            "(-, A, B)" => 3
            "(~, A, B)" => 3
            "(&, A, B, C)" => 4
            "(|, A, B, C)" => 4
            "(*, A, B, C, D)" => 5
            r"(/, R, _)" => 2
            r"(\, R, _)" => 2
            r"(/, R, _, A)" => 3
            r"(\, R, _, A)" => 3
            r"(&&, A, B)" => 3
            r"(||, A, B)" => 3
            r"(--, A)" => 2
            r"(--, (--, A))" => 3
            r"(--, (--, (--, A)))" => 4
            // ÈôàËø∞
            "<A --> B>" => 3
            "<A <-> B>" => 3
            "<A ==> B>" => 3
            "<A <=> B>" => 3
            "<<A --> B> --> B>" => 5
            "<<A <-> B> <-> B>" => 5
            "<<A ==> B> ==> B>" => 5
            "<<A <=> B> <=> B>" => 5
            "<<A --> B> --> <A --> B>>" => 7
            "<<A <-> B> <-> <A <-> B>>" => 7
            "<<A ==> B> ==> <A ==> B>>" => 7
            "<<A <=> B> <=> <A <=> B>>" => 7
        }
        ok!()
    }

    /// * „Äê2024-04-25 16:17:17„ÄëüìåÁõ¥Êé•ÂèÇÁÖßÁöÑ`identifier`
    #[test]
    fn is_same_type() -> AResult {
        macro_once! {
            // * üö©Ê®°ÂºèÔºöËØçÈ°πÂ≠óÁ¨¶‰∏≤ ‚áí È¢ÑÊúü
            macro is_same_type($( $s:literal ~ $s2:literal => $id:expr )*) {
                $(
                    let term = term!($s);
                    let term2 = term!($s2);
                    assert!(term.is_same_type(&term2));
                    assert_eq!(term.identifier, $id);
                    assert_eq!(term2.identifier, $id);
                )*
            }
            // Âç†‰ΩçÁ¨¶
            "_" ~ "_" => PLACEHOLDER
            // ÂéüÂ≠êËØçÈ°π
            "A" ~ "B" => WORD
            "$A" ~ "$x" => VAR_INDEPENDENT
            "#A" ~ "#1" => VAR_DEPENDENT
            "?A" ~ "?question" => VAR_QUERY
            // Â§çÂêàËØçÈ°π
            "{A}" ~ "{x, y, z}" => SET_EXT_OPERATOR
            "[A]" ~ "[„Ñö, „Ñõ, „Ñú]" => SET_INT_OPERATOR
            "(&, A)" ~ "(&, x, y)" => INTERSECTION_EXT_OPERATOR
            "(|, A)" ~ "(|, a, b)" => INTERSECTION_INT_OPERATOR
            "(-, A, B)" ~ "(-, B, A)" => DIFFERENCE_EXT_OPERATOR
            "(~, A, B)" ~ "(~, B, C)" => DIFFERENCE_INT_OPERATOR
            "(*, A)" ~ "(*, Œ±, Œ≤, Œ≥)" => PRODUCT_OPERATOR
            r"(/, R, _)" ~ r"(/, R, A, _, B)" => IMAGE_EXT_OPERATOR
            r"(\, R, _)" ~ r"(\, R, A, B, _)" => IMAGE_INT_OPERATOR
            r"(&&, A)" ~ r"(&&, X, Y, Z)" => CONJUNCTION_OPERATOR
            r"(||, A)" ~ r"(||, (||, A), B)" => DISJUNCTION_OPERATOR
            r"(--, A)" ~ r"(--, (~, B, A))" => NEGATION_OPERATOR
            // ÈôàËø∞
            "<A --> B>" ~ "<<B --> C> --> A>" => INHERITANCE_RELATION
            "<A <-> B>" ~ "<<B <-> C> <-> A>" => SIMILARITY_RELATION
            "<A ==> B>" ~ "<<B ==> C> ==> A>" => IMPLICATION_RELATION
            "<A <=> B>" ~ "<<B <=> C> <=> A>" => EQUIVALENCE_RELATION
        }
        ok!()
    }
}
